---
- name: Setup Squid
  hosts:
    - proxy
  become: yes
  gather_facts: yes
  tags:
    - proxy
  handlers:
    - name: restart squid
      ansible.builtin.systemd:
        name: squid
        state: restarted
  tasks:
    - name: Install Squid
      ansible.builtin.apt:
        name: squid
        state: latest

    - name: Configure Squid
      notify: restart squid
      ansible.builtin.copy:
        dest: /etc/squid/squid.conf
        content: |
          acl localnet src {{ network.identifier }}.{{ network.subnets.bastion }}
          acl SSL_ports port 443
          acl Safe_ports port 80		# http
          acl Safe_ports port 21		# ftp
          acl Safe_ports port 443		# https
          acl Safe_ports port 70		# gopher
          acl Safe_ports port 210		# wais
          acl Safe_ports port 1025-65535	# unregistered ports
          acl Safe_ports port 280		# http-mgmt
          acl Safe_ports port 488		# gss-http
          acl Safe_ports port 591		# filemaker
          acl Safe_ports port 777		# multiling http
          acl CONNECT method CONNECT
          http_access deny !Safe_ports
          http_access deny CONNECT !SSL_ports
          http_access allow localhost manager
          http_access deny manager
          http_access allow localhost
          http_access allow localnet
          http_access deny all
          http_port 3128
          coredump_dir /var/spool/squid
          refresh_pattern ^ftp:		1440	20%	10080
          refresh_pattern ^gopher:	1440	0%	1440
          refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
          refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
          refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
          refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
          refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
          refresh_pattern .		0	20%	4320
          logfile_rotate 0
          cache deny all
    
    - name: Enable Squid
      ansible.builtin.systemd:
        name: squid
        enabled: yes
        state: started

- name: Setup UFW
  hosts:
    - proxy
  become: yes
  gather_facts: yes
  tags:
    - firewall
    - proxy
  tasks:
    - name: Check ufw status
      no_log: true
      command: ufw status
      register: ufw_status

    - name: Enable ufw
      when: "('Status: active' not in ufw_status.stdout) and ((is_jump | default(false)) or (restrict_ssh_from_lan | default(false)))"
      ufw:
        state: enabled
        policy: allow

    - name: Set up UFW
      ufw:
        rule: allow
        proto: tcp
        from_ip: "{{ network.identifier }}.{{ network.subnets.bastion }}"
        port: "{{ item }}"
      with_items:
        - 22
        - "{{ network.proxy | split(':') | last }}"

    - name: Disable inbound traffic
      ufw:
        state: enabled
        policy: deny
        direction: incoming